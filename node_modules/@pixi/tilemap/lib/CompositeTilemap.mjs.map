{"version":3,"file":"CompositeTilemap.mjs","sources":["../src/CompositeTilemap.ts"],"sourcesContent":["import { Container, Texture, TextureSource } from 'pixi.js';\nimport { settings } from './settings';\nimport { Tilemap } from './Tilemap';\n\n/**\n * A tilemap composite that lazily builds tilesets layered into multiple tilemaps.\n *\n * The composite tileset is the concatenation of the individual tilesets used in the tilemaps. You can\n * preinitialized it by passing a list of tile textures to the constructor. Otherwise, the composite tilemap\n * is lazily built as you add more tiles with newer tile textures. A new tilemap is created once the last\n * tilemap has reached its limit (as set by {@link CompositeTilemap.texturesPerTilemap texturesPerTilemap}).\n *\n * @example\n * import { Application } from '@pixi/app';\n * import { CompositeTilemap } from '@pixi/tilemap';\n * import { Loader } from '@pixi/loaders';\n *\n * // Setup view & stage.\n * const app = new Application();\n *\n * document.body.appendChild(app.renderer.view);\n * app.stage.interactive = true;\n *\n * // Global reference to the tilemap.\n * let globalTilemap: CompositeTilemap;\n *\n * // Load the tileset spritesheet!\n * Loader.shared.load('atlas.json');\n *\n * // Initialize the tilemap scene when the assets load.\n * Loader.shared.load(function onTilesetLoaded()\n * {\n *      const tilemap = new CompositeTilemap();\n *\n *      // Setup the game level with grass and dungeons!\n *      for (let x = 0; x < 10; x++)\n *      {\n *          for (let y = 0; y < 10; y++)\n *          {\n *              tilemap.tile(\n *                  x % 2 === 0 && (x === y || x + y === 10) ? 'dungeon.png' : 'grass.png',\n *                  x * 100,\n *                  y * 100,\n *              );\n *          }\n *      }\n *\n *      globalTilemap = app.stage.addChild(tilemap);\n * });\n *\n * // Show a bomb at a random location whenever the user clicks!\n * app.stage.on('click', function onClick()\n * {\n *      if (!globalTilemap) return;\n *\n *      const x = Math.floor(Math.random() * 10);\n *      const y = Math.floor(Math.random() * 10);\n *\n *      globalTilemap.tile('bomb.png', x * 100, y * 100);\n * });\n */\nexport class CompositeTilemap extends Container\n{\n    /** The hard limit on the number of tile textures used in each tilemap. */\n    public readonly texturesPerTilemap: number;\n\n    /**\n     * The animation frame vector.\n     *\n     * Animated tiles have four parameters - `animX`, `animY`, `animCountX`, `animCountY`. The textures\n     * of adjacent animation frames are at offset `animX` or `animY` of each other, with `animCountX` per\n     * row and `animCountY` per column.\n     *\n     * The animation frame vector specifies which animation frame texture to use. If the x/y coordinate is\n     * larger than the `animCountX` or `animCountY` for a specific tile, the modulus is taken.\n     */\n    public tileAnim: [number, number] = null;\n\n    /** The last modified tilemap. */\n    protected lastModifiedTilemap: Tilemap = null;\n\n    private modificationMarker = 0;\n    // private shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\n\n    /**\n     * @param tileset - A list of tile base-textures that will be used to eagerly initialized the layered\n     *  tilemaps. This is only an performance optimization, and using {@link CompositeTilemap.tile tile}\n     *  will work equivalently.\n     */\n    constructor(tileset?: Array<TextureSource>)\n    {\n        super();\n\n        this.texturesPerTilemap = settings.TEXTURES_PER_TILEMAP;\n        this.tileset(tileset);\n    }\n\n    /**\n     * This will preinitialize the tilesets of the layered tilemaps.\n     *\n     * If used after a tilemap has been created (or a tile added), this will overwrite the tile textures of the\n     * existing tilemaps. Passing the tileset to the constructor instead is the best practice.\n     *\n     * @param tileTextures - The list of tile textures that make up the tileset.\n     */\n    tileset(tileTextures: Array<TextureSource>): this\n    {\n        if (!tileTextures)\n        {\n            tileTextures = [];\n        }\n\n        const texPerChild = this.texturesPerTilemap;\n        const len1 = this.children.length;\n        const len2 = Math.ceil(tileTextures.length / texPerChild);\n\n        for (let i = 0; i < Math.min(len1, len2); i++)\n        {\n            (this.children[i] as Tilemap).setTileset(\n                tileTextures.slice(i * texPerChild, (i + 1) * texPerChild)\n            );\n        }\n        for (let i = len1; i < len2; i++)\n        {\n            const tilemap = new Tilemap(tileTextures.slice(i * texPerChild, (i + 1) * texPerChild));\n\n            tilemap.compositeParent = true;\n\n            // TODO: Don't use children\n            this.addChild(tilemap);\n        }\n\n        return this;\n    }\n\n    /** Clears the tilemap composite. */\n    clear(): this\n    {\n        for (let i = 0; i < this.children.length; i++)\n        {\n            (this.children[i] as Tilemap).clear();\n        }\n\n        this.modificationMarker = 0;\n\n        return this;\n    }\n\n    /** Changes the rotation of the last added tile. */\n    tileRotate(rotate: number): this\n    {\n        if (this.lastModifiedTilemap)\n        {\n            this.lastModifiedTilemap.tileRotate(rotate);\n        }\n\n        return this;\n    }\n\n    /** Changes `animX`, `animCountX` of the last added tile. */\n    tileAnimX(offset: number, count: number): this\n    {\n        if (this.lastModifiedTilemap)\n        {\n            this.lastModifiedTilemap.tileAnimX(offset, count);\n        }\n\n        return this;\n    }\n\n    /** Changes `animY`, `animCountY` of the last added tile. */\n    tileAnimY(offset: number, count: number): this\n    {\n        if (this.lastModifiedTilemap)\n        {\n            this.lastModifiedTilemap.tileAnimY(offset, count);\n        }\n\n        return this;\n    }\n\n    /** Changes `tileAnimDivisor` value of the last added tile. */\n    tileAnimDivisor(divisor: number): this\n    {\n        if (this.lastModifiedTilemap)\n        {\n            this.lastModifiedTilemap.tileAnimDivisor(divisor);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds a tile that paints the given tile texture at (x, y).\n     *\n     * @param tileTexture - The tile texture. You can pass an index into the composite tilemap as well.\n     * @param x - The local x-coordinate of the tile's location.\n     * @param y - The local y-coordinate of the tile's location.\n     * @param options - Additional options to pass to {@link Tilemap.tile}.\n     * @param [options.u=texture.frame.x] - The x-coordinate of the texture in its base-texture's space.\n     * @param [options.v=texture.frame.y] - The y-coordinate of the texture in its base-texture's space.\n     * @param [options.tileWidth=texture.orig.width] - The local width of the tile.\n     * @param [options.tileHeight=texture.orig.height] - The local height of the tile.\n     * @param [options.animX=0] - For animated tiles, this is the \"offset\" along the x-axis for adjacent\n     *      animation frame textures in the base-texture.\n     * @param [options.animY=0] - For animated tiles, this is the \"offset\" along the y-axis for adjacent\n     *      animation frames textures in the base-texture.\n     * @param [options.rotate=0]\n     * @param [options.animCountX=1024] - For animated tiles, this is the number of animation frame textures\n     *      per row.\n     * @param [options.animCountY=1024] - For animated tiles, this is the number of animation frame textures\n     *      per column.\n     * @param [options.animDivisor=1] - For animated tiles, this is the animation duration each frame\n     * @param [options.alpha=1] - Tile alpha\n     * @return This tilemap, good for chaining.\n     */\n    tile(\n        tileTexture: Texture | string | number,\n        x: number,\n        y: number,\n        options: {\n            u?: number,\n            v?: number,\n            tileWidth?: number,\n            tileHeight?: number,\n            animX?: number,\n            animY?: number,\n            rotate?: number,\n            animCountX?: number,\n            animCountY?: number,\n            animDivisor?: number,\n            alpha?: number,\n        } = {}\n    ): this\n    {\n        let tilemap: Tilemap = null;\n        const children = this.children;\n\n        this.lastModifiedTilemap = null;\n\n        if (typeof tileTexture === 'number')\n        {\n            const childIndex = tileTexture / this.texturesPerTilemap >> 0;\n            let tileIndex = 0;\n\n            tilemap = children[childIndex] as Tilemap;\n\n            if (!tilemap)\n            {\n                tilemap = children[0] as Tilemap;\n\n                // Silently fail if the tilemap doesn't exist\n                if (!tilemap) return this;\n\n                tileIndex = 0;\n            }\n            else\n            {\n                tileIndex = tileTexture % this.texturesPerTilemap;\n            }\n\n            tilemap.tile(\n                tileIndex,\n                x,\n                y,\n                options,\n            );\n        }\n        else\n        {\n            if (typeof tileTexture === 'string')\n            {\n                tileTexture = Texture.from(tileTexture);\n            }\n\n            // Probe all tilemaps to find which tileset contains the base-texture.\n            for (let i = 0; i < children.length; i++)\n            {\n                const child = children[i] as Tilemap;\n                const tex = child.getTileset().arr;\n\n                for (let j = 0; j < tex.length; j++)\n                {\n                    if (tex[j] === tileTexture.source)\n                    {\n                        tilemap = child;\n                        break;\n                    }\n                }\n\n                if (tilemap)\n                {\n                    break;\n                }\n            }\n\n            // If no tileset contains the base-texture, attempt to add it.\n            if (!tilemap)\n            {\n                // Probe the tilemaps to find one below capacity. If so, add the texture into that tilemap.\n                for (let i = children.length - 1; i >= 0; i--)\n                {\n                    const child = children[i] as Tilemap;\n\n                    if (child.getTileset().count < this.texturesPerTilemap)\n                    {\n                        tilemap = child;\n                        child.getTileset().push(tileTexture.source);\n                        break;\n                    }\n                }\n\n                // Otherwise, create a new tilemap initialized with that tile texture.\n                if (!tilemap)\n                {\n                    tilemap = new Tilemap(tileTexture.source);\n                    tilemap.compositeParent = true;\n\n                    this.addChild(tilemap);\n                }\n            }\n\n            tilemap.tile(\n                tileTexture,\n                x,\n                y,\n                options,\n            );\n        }\n\n        this.lastModifiedTilemap = tilemap;\n\n        return this;\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    isModified(anim: boolean): boolean\n    {\n        const layers = this.children;\n\n        if (this.modificationMarker !== layers.length)\n        {\n            return true;\n        }\n        for (let i = 0; i < layers.length; i++)\n        {\n            if ((layers[i] as Tilemap).isModified(anim))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    clearModify(): void\n    {\n        const layers = this.children;\n\n        this.modificationMarker = layers.length;\n        for (let i = 0; i < layers.length; i++)\n        {\n            (layers[i] as Tilemap).clearModify();\n        }\n    }\n\n    /**\n     * @deprecated Since @pixi/tilemap 3.\n     * @see CompositeTilemap.tile\n     */\n    addFrame(\n        texture: Texture | string | number,\n        x: number,\n        y: number,\n        animX?: number,\n        animY?: number,\n        animWidth?: number,\n        animHeight?: number,\n        animDivisor?: number,\n        alpha?: number\n    ): this\n    {\n        return this.tile(\n            texture,\n            x, y,\n            {\n                animX,\n                animY,\n                animCountX: animWidth,\n                animCountY: animHeight,\n                animDivisor,\n                alpha\n            }\n        );\n    }\n\n    /**\n     * @deprecated @pixi/tilemap 3\n     * @see CompositeTilemap.tile\n     */\n    // eslint-disable-next-line max-params\n    addRect(\n        textureIndex: number,\n        u: number,\n        v: number,\n        x: number,\n        y: number,\n        tileWidth: number,\n        tileHeight: number,\n        animX?: number,\n        animY?: number,\n        rotate?: number,\n        animWidth?: number,\n        animHeight?: number\n    ): this\n    {\n        const childIndex: number = textureIndex / this.texturesPerTilemap >> 0;\n        const textureId: number = textureIndex % this.texturesPerTilemap;\n\n        if (this.children[childIndex] && (this.children[childIndex] as Tilemap).getTileset().count > 0)\n        {\n            this.lastModifiedTilemap = (this.children[childIndex] as Tilemap);\n            this.lastModifiedTilemap.addRect(\n                textureId, u, v, x, y, tileWidth, tileHeight, animX, animY, rotate, animWidth, animHeight\n            );\n        }\n        else\n        {\n            this.lastModifiedTilemap = null;\n        }\n\n        return this;\n    }\n\n    /**\n     * Alias for {@link CompositeTilemap.tileset tileset}.\n     *\n     * @deprecated Since @pixi/tilemap 3.\n     */\n    setBitmaps = this.tileset;\n\n    /**\n     * @deprecated Since @pixi/tilemap 3.\n     * @readonly\n     * @see CompositeTilemap.texturesPerTilemap\n     */\n    get texPerChild(): number { return this.texturesPerTilemap; }\n}\n"],"names":[],"mappings":"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"}