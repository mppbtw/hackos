{"version":3,"file":"Tilemap.js","sources":["../src/Tilemap.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport { Bounds, Container, groupD8, State, Texture, TextureSource } from 'pixi.js';\nimport { settings } from './settings';\nimport { TilemapInstruction, TilemapPipe } from './TilemapPipe';\nimport { TileTextureArray } from './TileTextureArray';\n\nimport type { DestroyOptions } from 'pixi.js';\nimport type { TilemapGeometry } from './TilemapGeometry';\n\nenum POINT_STRUCT\n    {\n    U,\n    V,\n    X,\n    Y,\n    TILE_WIDTH,\n    TILE_HEIGHT,\n    ROTATE,\n    ANIM_X,\n    ANIM_Y,\n    TEXTURE_INDEX,\n    ANIM_COUNT_X,\n    ANIM_COUNT_Y,\n    ANIM_DIVISOR,\n    ALPHA,\n}\n\nexport const POINT_STRUCT_SIZE = (Object.keys(POINT_STRUCT).length / 2);\n\n/**\n * A rectangular tilemap implementation that renders a predefined set of tile textures.\n *\n * The {@link Tilemap.tileset tileset} of a tilemap defines the list of base-textures that can be painted in the\n * tilemap. A texture is identified using its base-texture's index into the this list, i.e. changing the base-texture\n * at a given index in the tileset modifies the paint of all tiles pointing to that index.\n *\n * The size of the tileset is limited by the texture units supported by the client device. The minimum supported\n * value is 8, as defined by the WebGL 1 specification. `gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS`) can be used\n * to extract this limit. {@link CompositeTilemap} can be used to get around this limit by layering multiple tilemap\n * instances.\n *\n * @example\n * import { Tilemap } from '@pixi/tilemap';\n * import { Loader } from '@pixi/loaders';\n *\n * // Add the spritesheet into your loader!\n * Loader.shared.add('atlas', 'assets/atlas.json');\n *\n * // Make the tilemap once the tileset assets are available.\n * Loader.shared.load(function onTilesetLoaded()\n * {\n *      // The base-texture is shared between all the tile textures.\n *      const tilemap = new Tilemap([Texture.from('grass.png').baseTexture])\n *          .tile('grass.png', 0, 0)\n *          .tile('grass.png', 100, 100)\n *          .tile('brick_wall.png', 0, 100);\n * });\n */\nexport class Tilemap extends Container\n{\n    // TODO: make default color work\n    /**\n     * Currently doesnt work.\n     */\n    shadowColor = new Float32Array([0.0, 0.0, 0.0, 0.5]);\n    state = State.for2d();\n\n    is_valid = false;\n\n    public readonly renderPipeId = 'tilemap';\n    public readonly canBundle = true;\n\n    _instruction = {\n        renderPipeId: 'tilemap',\n        tilemap: this as Tilemap\n    } as TilemapInstruction;\n\n    /**\n     * @internal\n     * @ignore\n     */\n    checkValid()\n    {\n        const v = this.tileset.count > 0 && this.pointsBuf.length > 0;\n        const res = this.is_valid !== v;\n\n        this.is_valid = v;\n\n        return res !== v;\n    }\n\n    /**\n     * The tile animation frame.\n     *\n     * @see CompositeTilemap.tileAnim\n     */\n    public tileAnim: [number, number] = null;\n\n    /**\n     * This is the last uploaded size of the tilemap geometry.\n     * @ignore\n     */\n    rects_count = 0;\n\n    /** @ignore */\n    compositeParent = false;\n\n    /**\n     * The list of base-textures being used in the tilemap.\n     *\n     * This should not be shuffled after tiles have been added into this tilemap. Usually, only tile textures\n     * should be added after tiles have been added into the map.\n     */\n    protected tileset = new TileTextureArray(settings.TEXTURES_PER_TILEMAP);\n\n    /**\n     * The local bounds of the tilemap itself. This does not include DisplayObject children.\n     */\n    protected readonly tilemapBounds = new Bounds();\n\n    /** Flags whether any animated tile was added. */\n    protected hasAnimatedTile = false;\n\n    /** The interleaved geometry of the tilemap. */\n    private pointsBuf: Array<number> = [];\n\n    /**\n     * @param tileset - The tileset to use for the tilemap. This can be reset later with {@link Tilemap.setTileset}. The\n     *      base-textures in this array must not be duplicated.\n     */\n    constructor(tileset: TextureSource | Array<TextureSource>)\n    {\n        super();\n        this.setTileset(tileset);\n    }\n\n    /**\n     * @returns The tileset of this tilemap.\n     */\n    getTileset(): TileTextureArray\n    {\n        return this.tileset;\n    }\n\n    /**\n     * Define the tileset used by the tilemap.\n     *\n     * @param textureOrArray - The list of textures to use in the tilemap. If a base-texture (not array) is passed, it will\n     *  be wrapped into an array. This should not contain any duplicates.\n     */\n    setTileset(textureOrArray: TileTextureArray | TextureSource | Array<TextureSource> = []): this\n    {\n        let ts = this.tileset;\n\n        if (textureOrArray instanceof TileTextureArray)\n        {\n            this.tileset = textureOrArray;\n            this.didViewUpdate = true;\n        }\n        else if (textureOrArray instanceof TextureSource)\n        {\n            if (ts.count === 1 && ts.arr[0] === textureOrArray)\n            {\n                return this;\n            }\n\n            ts = this.tileset = new TileTextureArray(settings.TEXTURES_PER_TILEMAP);\n            ts.push(textureOrArray);\n            this.didViewUpdate = true;\n        }\n        else\n        {\n            if (textureOrArray.length === ts.count)\n            {\n                let flag = true;\n\n                for (let i = 0; i < textureOrArray.length; i++)\n                {\n                    if (textureOrArray[i]?.source !== ts.arr[i])\n                    {\n                        flag = false;\n                        break;\n                    }\n                }\n\n                if (flag)\n                {\n                    return this;\n                }\n            }\n\n            ts = this.tileset = new TileTextureArray(settings.TEXTURES_PER_TILEMAP);\n\n            for (let i = 0; i < textureOrArray.length; i++)\n            {\n                ts.push(textureOrArray[i]?.source);\n            }\n            this.didViewUpdate = true;\n        }\n\n        return this;\n    }\n\n    /**  Clears all the tiles added into this tilemap. */\n    clear(): this\n    {\n        this.pointsBuf.length = 0;\n        this.rects_count = 0;\n        this.tilemapBounds.clear();\n        this.hasAnimatedTile = false;\n\n        return this;\n    }\n\n    /**\n     * Adds a tile that paints the given texture at (x, y).\n     *\n     * @param tileTexture - The tiling texture to render.\n     * @param x - The local x-coordinate of the tile's position.\n     * @param y - The local y-coordinate of the tile's position.\n     * @param options - Additional tile options.\n     * @param [options.u=texture.frame.x] - The x-coordinate of the texture in its base-texture's space.\n     * @param [options.v=texture.frame.y] - The y-coordinate of the texture in its base-texture's space.\n     * @param [options.tileWidth=texture.orig.width] - The local width of the tile.\n     * @param [options.tileHeight=texture.orig.height] - The local height of the tile.\n     * @param [options.animX=0] - For animated tiles, this is the \"offset\" along the x-axis for adjacent\n     *      animation frame textures in the base-texture.\n     * @param [options.animY=0] - For animated tiles, this is the \"offset\" along the y-axis for adjacent\n     *      animation frames textures in the base-texture.\n     * @param [options.rotate=0]\n     * @param [options.animCountX=1024] - For animated tiles, this is the number of animation frame textures\n     *      per row.\n     * @param [options.animCountY=1024] - For animated tiles, this is the number of animation frame textures\n     *      per column.\n     * @param [options.animDivisor=1] - For animated tiles, this is the animation duration of each frame\n     * @param [options.alpha=1] - Tile alpha\n     * @return This tilemap, good for chaining.\n     */\n    tile(\n        tileTexture: number | string | Texture | TextureSource,\n        x: number,\n        y: number,\n        options: {\n            u?: number,\n            v?: number,\n            tileWidth?: number,\n            tileHeight?: number,\n            animX?: number,\n            animY?: number,\n            rotate?: number,\n            animCountX?: number,\n            animCountY?: number,\n            animDivisor?: number,\n            alpha?: number,\n        } = {}\n    ): this\n    {\n        this.didViewUpdate = true;\n        let baseTexture: TextureSource;\n        let textureIndex = -1;\n        let was_num = false;\n\n        if (typeof tileTexture === 'number')\n        {\n            textureIndex = tileTexture;\n            was_num = true;\n            baseTexture = this.tileset.arr[textureIndex];\n        }\n        else\n        {\n            let texture: Texture | TextureSource;\n\n            if (typeof tileTexture === 'string')\n            {\n                texture = Texture.from(tileTexture);\n            }\n            else\n            {\n                texture = tileTexture;\n            }\n\n            const textureList = this.tileset;\n\n            for (let i = 0; i < textureList.count; i++)\n            {\n                if (textureList.arr[i] === texture.source)\n                {\n                    textureIndex = i;\n                    break;\n                }\n            }\n\n            if ('frame' in texture)\n            {\n                options.u = options.u ?? texture.frame.x;\n                options.v = options.v ?? texture.frame.y;\n                options.tileWidth = options.tileWidth ?? texture.orig.width;\n                options.tileHeight = options.tileHeight ?? texture.orig.height;\n            }\n\n            baseTexture = texture.source;\n        }\n\n        if (!was_num && !baseTexture)\n        {\n            console.error('The tile texture was not found in the tilemap tileset.');\n\n            return this;\n        }\n\n        const {\n            u = 0,\n            v = 0,\n            tileWidth = baseTexture.width,\n            tileHeight = baseTexture.height,\n            animX = 0,\n            animY = 0,\n            rotate = 0,\n            animCountX = 1024,\n            animCountY = 1024,\n            animDivisor = 1,\n            alpha = 1,\n        } = options;\n\n        const pb = this.pointsBuf;\n\n        this.hasAnimatedTile = this.hasAnimatedTile || animX > 0 || animY > 0;\n\n        pb.push(u);\n        pb.push(v);\n        pb.push(x);\n        pb.push(y);\n        pb.push(tileWidth);\n        pb.push(tileHeight);\n        pb.push(rotate);\n        pb.push(animX | 0);\n        pb.push(animY | 0);\n        pb.push(textureIndex);\n        pb.push(animCountX);\n        pb.push(animCountY);\n        pb.push(animDivisor);\n        pb.push(alpha);\n\n        this.tilemapBounds.addFrame(x, y, x + tileWidth, y + tileHeight);\n\n        return this;\n    }\n\n    /** Changes the rotation of the last tile. */\n    tileRotate(rotate: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.TEXTURE_INDEX)] = rotate;\n    }\n\n    /** Changes the `animX`, `animCountX` of the last tile. */\n    tileAnimX(offset: number, count: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_X)] = offset;\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_COUNT_X)] = count;\n        // pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_DIVISOR)] = duration;\n    }\n\n    /** Changes the `animY`, `animCountY` of the last tile. */\n    tileAnimY(offset: number, count: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_Y)] = offset;\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_COUNT_Y)] = count;\n    }\n\n    /** Changes the `animDivisor` value of the last tile. */\n    tileAnimDivisor(divisor: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ANIM_DIVISOR)] = divisor;\n    }\n\n    tileAlpha(alpha: number): void\n    {\n        const pb = this.pointsBuf;\n\n        pb[pb.length - (POINT_STRUCT_SIZE - POINT_STRUCT.ALPHA)] = alpha;\n    }\n\n    private vbId = 0;\n    vb: TilemapGeometry = null;\n    private vbBuffer: ArrayBuffer = null;\n    private vbArray: Float32Array = null;\n    private vbInts: Uint32Array = null;\n\n    private destroyVb(): void\n    {\n        if (this.vb)\n        {\n            this.vb.destroy();\n            this.vb = null;\n        }\n    }\n\n    updateBuffer(plugin: TilemapPipe)\n    {\n        const points = this.pointsBuf;\n        const rects_count = points.length / POINT_STRUCT_SIZE;\n        let vb = this.vb;\n\n        if (this.tileset.count === 0 || rects_count === 0 || (this.rects_count === rects_count && vb))\n        {\n            return;\n        }\n        this.rects_count = rects_count;\n\n        // lost context! recover!\n\n        if (!vb)\n        {\n            vb = plugin.createVb();\n            this.vb = vb;\n            this.vbId = (vb as any).id;\n            this.vbBuffer = null;\n        }\n\n        // if layer was changed, re-upload vertices\n        const vertices = rects_count * vb.vertPerQuad;\n\n        plugin.checkIndexBuffer(rects_count);\n\n        const vertexBuf = vb.getBuffer('aVertexPosition');\n        const vs = vb.stride * vertices;\n\n        if (!this.vbBuffer || this.vbBuffer.byteLength < vs)\n        {\n            // !@#$ happens, need resize\n            let bk = vb.stride;\n\n            while (bk < vs)\n            {\n                bk *= 2;\n            }\n            this.vbBuffer = new ArrayBuffer(bk);\n            this.vbArray = new Float32Array(this.vbBuffer);\n            this.vbInts = new Uint32Array(this.vbBuffer);\n        }\n\n        const arr = this.vbArray;\n        const ints = this.vbInts;\n        let sz = 0;\n        let textureId = 0;\n\n        for (let i = 0; i < points.length; i += POINT_STRUCT_SIZE)\n        {\n            const eps = 0.5;\n\n            if (this.compositeParent)\n            {\n                textureId = points[i + POINT_STRUCT.TEXTURE_INDEX];\n            }\n            const x = points[i + POINT_STRUCT.X];\n            const y = points[i + POINT_STRUCT.Y];\n            const w = points[i + POINT_STRUCT.TILE_WIDTH];\n            const h = points[i + POINT_STRUCT.TILE_HEIGHT];\n            const u = points[i + POINT_STRUCT.U];\n            const v = points[i + POINT_STRUCT.V];\n            let rotate = points[i + POINT_STRUCT.ROTATE];\n\n            const animX = points[i + POINT_STRUCT.ANIM_X];\n            const animY = points[i + POINT_STRUCT.ANIM_Y];\n            const animWidth = points[i + POINT_STRUCT.ANIM_COUNT_X] || 1024;\n            const animHeight = points[i + POINT_STRUCT.ANIM_COUNT_Y] || 1024;\n\n            const animXEncoded = animX + (animWidth * 2048);\n            const animYEncoded = animY + (animHeight * 2048);\n            const animDivisor = points[i + POINT_STRUCT.ANIM_DIVISOR];\n            const alpha = points[i + POINT_STRUCT.ALPHA];\n\n            let u0: number;\n            let v0: number; let u1: number;\n            let v1: number; let u2: number;\n            let v2: number; let u3: number;\n            let v3: number;\n\n            if (rotate === 0)\n            {\n                u0 = u;\n                v0 = v;\n                u1 = u + w;\n                v1 = v;\n                u2 = u + w;\n                v2 = v + h;\n                u3 = u;\n                v3 = v + h;\n            }\n            else\n            {\n                let w2 = w / 2;\n                let h2 = h / 2;\n\n                if (rotate % 4 !== 0)\n                {\n                    w2 = h / 2;\n                    h2 = w / 2;\n                }\n                const cX = u + w2;\n                const cY = v + h2;\n\n                rotate = groupD8.add(rotate, groupD8.NW);\n                u0 = cX + (w2 * groupD8.uX(rotate));\n                v0 = cY + (h2 * groupD8.uY(rotate));\n\n                rotate = groupD8.add(rotate, 2); // rotate 90 degrees clockwise\n                u1 = cX + (w2 * groupD8.uX(rotate));\n                v1 = cY + (h2 * groupD8.uY(rotate));\n\n                rotate = groupD8.add(rotate, 2);\n                u2 = cX + (w2 * groupD8.uX(rotate));\n                v2 = cY + (h2 * groupD8.uY(rotate));\n\n                rotate = groupD8.add(rotate, 2);\n                u3 = cX + (w2 * groupD8.uX(rotate));\n                v3 = cY + (h2 * groupD8.uY(rotate));\n            }\n\n            arr[sz++] = x;\n            arr[sz++] = y;\n            arr[sz++] = u0;\n            arr[sz++] = v0;\n            arr[sz++] = u + eps;\n            arr[sz++] = v + eps;\n            arr[sz++] = u + w - eps;\n            arr[sz++] = v + h - eps;\n            arr[sz++] = animXEncoded;\n            arr[sz++] = animYEncoded;\n            ints[sz++] = textureId;\n            arr[sz++] = animDivisor;\n            arr[sz++] = alpha;\n\n            arr[sz++] = x + w;\n            arr[sz++] = y;\n            arr[sz++] = u1;\n            arr[sz++] = v1;\n            arr[sz++] = u + eps;\n            arr[sz++] = v + eps;\n            arr[sz++] = u + w - eps;\n            arr[sz++] = v + h - eps;\n            arr[sz++] = animXEncoded;\n            arr[sz++] = animYEncoded;\n            ints[sz++] = textureId;\n            arr[sz++] = animDivisor;\n            arr[sz++] = alpha;\n\n            arr[sz++] = x + w;\n            arr[sz++] = y + h;\n            arr[sz++] = u2;\n            arr[sz++] = v2;\n            arr[sz++] = u + eps;\n            arr[sz++] = v + eps;\n            arr[sz++] = u + w - eps;\n            arr[sz++] = v + h - eps;\n            arr[sz++] = animXEncoded;\n            arr[sz++] = animYEncoded;\n            ints[sz++] = textureId;\n            arr[sz++] = animDivisor;\n            arr[sz++] = alpha;\n\n            arr[sz++] = x;\n            arr[sz++] = y + h;\n            arr[sz++] = u3;\n            arr[sz++] = v3;\n            arr[sz++] = u + eps;\n            arr[sz++] = v + eps;\n            arr[sz++] = u + w - eps;\n            arr[sz++] = v + h - eps;\n            arr[sz++] = animXEncoded;\n            arr[sz++] = animYEncoded;\n            ints[sz++] = textureId;\n            arr[sz++] = animDivisor;\n            arr[sz++] = alpha;\n        }\n\n        vertexBuf.data = arr;\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    isModified(anim: boolean): boolean\n    {\n        if (this.rects_count * POINT_STRUCT_SIZE !== this.pointsBuf.length\n            || (anim && this.hasAnimatedTile))\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * This will pull forward the modification marker.\n     *\n     * @internal\n     * @ignore\n     */\n    clearModify(): void\n    {\n        this.rects_count = this.pointsBuf.length / POINT_STRUCT_SIZE;\n    }\n\n    public addBounds(bounds: Bounds)\n    {\n        const _bounds = this.tilemapBounds;\n\n        bounds.addFrame(_bounds.minX, _bounds.minY, _bounds.maxX, _bounds.maxY);\n    }\n\n    get bounds()\n    {\n        return this.tilemapBounds;\n    }\n\n    /** @override */\n    destroy(options?: DestroyOptions): void\n    {\n        super.destroy(options);\n        this.destroyVb();\n    }\n\n    /**\n     * Deprecated signature for {@link Tilemap.tile tile}.\n     *\n     * @deprecated Since @pixi/tilemap 3.\n     */\n    addFrame(texture: Texture | string | number, x: number, y: number, animX: number, animY: number): boolean\n    {\n        this.tile(\n            texture,\n            x,\n            y,\n            {\n                animX,\n                animY,\n            }\n        );\n\n        return true;\n    }\n\n    /**\n     * Deprecated signature for {@link Tilemap.tile tile}.\n     *\n     * @deprecated Since @pixi/tilemap 3.\n     */\n    // eslint-disable-next-line max-params\n    addRect(\n        textureIndex: number,\n        u: number,\n        v: number,\n        x: number,\n        y: number,\n        tileWidth: number,\n        tileHeight: number,\n        animX = 0,\n        animY = 0,\n        rotate = 0,\n        animCountX = 1024,\n        animCountY = 1024,\n        animDivisor = 1,\n        alpha = 1,\n    ): this\n    {\n        return this.tile(\n            textureIndex,\n            x, y,\n            {\n                u, v, tileWidth, tileHeight, animX, animY, rotate, animCountX, animCountY, animDivisor, alpha\n            }\n        );\n    }\n}\n"],"names":["POINT_STRUCT","Container","State","TileTextureArray","settings","Bounds","TextureSource","Texture","groupD8"],"mappings":"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"}