{"version":3,"file":"TilemapPipe.js","sources":["../src/TilemapPipe.ts"],"sourcesContent":["import {\n    Buffer,\n    BufferUsage, ExtensionType, GlobalUniformGroup,\n    IndexBufferArray, Instruction, InstructionPipe, InstructionSet, Matrix, Renderer,\n    RenderPipe, UniformGroup\n} from 'pixi.js';\nimport { CompositeTilemap } from './CompositeTilemap';\nimport { settings } from './settings';\nimport { TilemapGeometry } from './TilemapGeometry';\n\nimport type { Tilemap } from './Tilemap';\n\n// For some reason, ESLint goes mad with indentation in this file ^&^\n/* eslint-disable no-mixed-spaces-and-tabs, indent */\n\nexport abstract class TilemapAdaptor\n{\n    abstract init(): void;\n    abstract execute(meshPipe: TilemapPipe, mesh: Tilemap): void;\n    abstract destroy(): void;\n\n    public pipe_uniforms = new UniformGroup({\n        u_proj_trans: { value: new Matrix(), type: 'mat3x3<f32>' },\n        u_anim_frame: { value: new Float32Array(2), type: 'vec2<f32>' },\n    });\n}\n\nexport interface TilemapInstruction extends Instruction\n{\n    renderPipeId: 'tilemap';\n    tilemap: Tilemap;\n}\n\n/**\n * Rendering helper pipeline for tilemaps. This plugin is registered automatically.\n */\nexport class TilemapPipe implements RenderPipe<Tilemap>, InstructionPipe<TilemapInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'tilemap',\n    } as const;\n    /** The managing renderer */\n    public readonly renderer: Renderer;\n\n    /** The tile animation frame */\n    public tileAnim = [0, 0];\n\n    private ibLen = 0;// index buffer length\n\n    /** The index buffer for the tilemaps to share. */\n    private indexBuffer: Buffer = null;\n\n    /** The shader used to render tilemaps. */\n    private shader: TilemapGeometry;\n\n    private adaptor: TilemapAdaptor;\n\n    constructor(renderer: Renderer, adaptor: TilemapAdaptor)\n    {\n        this.renderer = renderer;\n        this.adaptor = adaptor;\n\n        this.adaptor.init();\n\n\t    this.indexBuffer = new Buffer({\n            data: new Uint16Array([0, 1, 2, 0, 2, 3]),\n            label: 'index-tilemap-buffer',\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\t    this.checkIndexBuffer(2000);\n    }\n\n    start(): void\n    {\n\t    // sorry, nothing\n    }\n\n    /**\n\t * @internal\n\t * @ignore\n\t */\n    createVb(): TilemapGeometry\n    {\n\t    const geom = new TilemapGeometry(this.indexBuffer);\n\n        geom.lastTimeAccess = Date.now();\n\n\t    return geom;\n    }\n\n    /** @return The {@link TilemapGeometry} shader that this rendering pipeline is using. */\n    getShader(): TilemapGeometry { return this.shader; }\n\n    destroy(): void\n    {\n\t    // this.rectShader.destroy();\n\t    this.shader = null;\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    public checkIndexBuffer(size: number): void\n    {\n\t    const totalIndices = size * 6;\n\n\t    if (totalIndices <= this.ibLen)\n\t    {\n\t        return;\n\t    }\n\n\t    let len = totalIndices;\n\n\t    while (len < totalIndices)\n\t    {\n\t        len <<= 1;\n\t    }\n\n\t    this.ibLen = totalIndices;\n\t    this.indexBuffer.data = createIndicesForQuads(size,\n\t        settings.use32bitIndex ? new Uint32Array(totalIndices) : new Uint16Array(totalIndices));\n    }\n\n    destroyRenderable(_renderable: Tilemap): void\n    {\n        _renderable.vb.destroy(true);\n        _renderable.vb = null;\n    }\n\n    addRenderable(tilemap: Tilemap, instructionSet: InstructionSet | undefined): void\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        tilemap.updateBuffer(this);\n        tilemap.checkValid();\n        tilemap.getTileset().update();\n\n        if (tilemap.is_valid)\n        {\n            batcher.break(instructionSet);\n            instructionSet.add(tilemap._instruction);\n        }\n    }\n\n    updateRenderable(tilemap: Tilemap, _instructionSet?: InstructionSet | undefined): void\n    {\n        tilemap.updateBuffer(this);\n        tilemap.getTileset().update();\n    }\n\n    validateRenderable(renderable: Tilemap): boolean\n    {\n        return renderable.checkValid();\n    }\n\n    public execute({ tilemap }: TilemapInstruction)\n    {\n        if (!tilemap.isRenderable) return;\n\n        tilemap.state.blendMode = tilemap.groupBlendMode;\n\n        const { pipe_uniforms } = this.adaptor;\n\n        const u_proj_trans = pipe_uniforms.uniforms.u_proj_trans;\n        const u_global = ((this.renderer.globalUniforms as any)._activeUniforms.at(-1) as GlobalUniformGroup).uniforms;\n        let anim_frame = this.tileAnim;\n        const { u_anim_frame } = pipe_uniforms.uniforms;\n\n        u_global.uProjectionMatrix.copyTo(u_proj_trans).append(u_global.uWorldTransformMatrix)\n            .append(tilemap.worldTransform);\n        if (tilemap.compositeParent)\n        {\n            anim_frame = (tilemap.parent as CompositeTilemap).tileAnim || anim_frame;\n        }\n        u_anim_frame[0] = anim_frame[0];\n        u_anim_frame[1] = anim_frame[1];\n\n        pipe_uniforms.update();\n\n        this.adaptor.execute(this, tilemap);\n    }\n}\n\nfunction createIndicesForQuads(\n    size: number,\n    outBuffer: IndexBufferArray\n): IndexBufferArray\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n"],"names":["UniformGroup","Matrix","Buffer","BufferUsage","TilemapGeometry","settings","ExtensionType"],"mappings":"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"}