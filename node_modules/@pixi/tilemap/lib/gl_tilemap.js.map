{"version":3,"file":"gl_tilemap.js","sources":["../src/gl_tilemap.ts"],"sourcesContent":["import { ExtensionType, GlProgram, Shader, UniformGroup, WebGLRenderer } from 'pixi.js';\nimport { settings } from './settings';\nimport { Tilemap } from './Tilemap';\nimport { TilemapAdaptor, TilemapPipe } from './TilemapPipe';\nimport { TileTextureArray } from './TileTextureArray';\n\nconst gl_tilemap_vertex = `\nin vec2 aVertexPosition;\nin vec2 aTextureCoord;\nin vec4 aFrame;\nin vec2 aAnim;\nin float aAnimDivisor;\nin float aTextureId;\nin float aAlpha;\n\nuniform mat3 u_proj_trans;\nuniform vec2 u_anim_frame;\n\nout vec2 vTextureCoord;\nout float vTextureId;\nout vec4 vFrame;\nout float vAlpha;\n\nvoid main(void)\n{\n  gl_Position = vec4((u_proj_trans * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n  vec2 animCount = floor((aAnim + 0.5) / 2048.0);\n  vec2 animFrameOffset = aAnim - animCount * 2048.0;\n  vec2 currentFrame = floor(u_anim_frame / aAnimDivisor);\n  vec2 loop_num = floor((currentFrame + 0.5) / animCount);\n  vec2 animOffset = animFrameOffset * floor(currentFrame - loop_num * animCount);\n\n  vTextureCoord = aTextureCoord + animOffset;\n  vFrame = aFrame + vec4(animOffset, animOffset);\n  vTextureId = aTextureId;\n  vAlpha = aAlpha;\n}\n`;\n\nconst gl_tilemap_fragment = `\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nin vec2 vTextureCoord;\nin vec4 vFrame;\nin float vTextureId;\nin float vAlpha;\n\n//include_textures\n\nvoid main(void)\n{\n  float textureId = floor(vTextureId + 0.5);\n  vec2 textureCoord = clamp(vTextureCoord, vFrame.xy, vFrame.zw);\n  vec4 color = sampleMultiTexture(textureId, textureCoord);\n  finalColor = color * vAlpha;\n}\n`;\n\nexport class GlTilemapAdaptor extends TilemapAdaptor\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'tilemap',\n    } as const;\n\n    _shader: Shader = null;\n    max_textures: number = settings.TEXTURES_PER_TILEMAP;\n\n    destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n\n    execute(pipe: TilemapPipe, tilemap: Tilemap): void\n    {\n        const renderer = pipe.renderer as WebGLRenderer;\n        const shader = this._shader;\n        const tileset = tilemap.getTileset();\n\n        const tu = shader.resources.texture_uniforms;\n\n        if (tu.uniforms.u_texture_size !== tileset.tex_sizes)\n        {\n            tu.uniforms.u_texture_size = tileset.tex_sizes;\n            tu.update();\n        }\n\n        for (let i = 0; i < tileset.length; i++)\n        {\n            renderer.texture.bind(tileset.arr[i], i);\n        }\n\n        renderer.encoder.draw({\n            geometry: tilemap.vb,\n            shader,\n            state: tilemap.state,\n            size: tilemap.rects_count * 6\n        });\n\n        // TODO: support several tilemaps here, without re-setting extra uniforms\n    }\n\n    init(): void\n    {\n        this._shader = new Shader({\n            glProgram: GlProgram.from({\n                vertex: gl_tilemap_vertex,\n                fragment: gl_tilemap_fragment.replace('//include_textures',\n                    TileTextureArray.generate_gl_textures(this.max_textures))\n            }),\n            resources: {\n                texture_uniforms: new UniformGroup(TileTextureArray.gl_gen_resources(this.max_textures), { isStatic: true }),\n                pipe_uniforms: this.pipe_uniforms.uniformStructures,\n            },\n        });\n    }\n}\n"],"names":["TilemapAdaptor","settings","Shader","GlProgram","TileTextureArray","UniformGroup","ExtensionType"],"mappings":"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"}