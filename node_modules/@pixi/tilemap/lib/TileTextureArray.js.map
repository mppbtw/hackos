{"version":3,"file":"TileTextureArray.js","sources":["../src/TileTextureArray.ts"],"sourcesContent":["import { BindGroup, Buffer, BufferUsage, Texture, TextureSource, UniformGroup } from 'pixi.js';\n\nexport class TileTextureArray\n{\n    max_textures: number;\n    constructor(max_textures: number)\n    {\n        this.max_textures = max_textures;\n        this.tex_sizes = new Float32Array((this.max_textures * 4) + 4);\n        this.tex_buf = new Buffer({\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n        });\n    }\n\n    arr: TextureSource[] = [];\n    count = 0;\n    dirty = false;\n    dirty_gpu = false;\n    bind_group: BindGroup = null;\n    bind_group_resources: any = {};\n    tex_sizes: Float32Array = null;\n    null_color: Float32Array = new Float32Array([0, 0, 0, 0.5]);\n    tex_buf: Buffer = null;\n\n    get length()\n    {\n        return this.count;\n    }\n\n    push(tex: TextureSource)\n    {\n        this.arr[this.count++] = tex;\n        this.dirty = true;\n    }\n\n    at(ind: number)\n    {\n        return this.arr[ind];\n    }\n\n    update()\n    {\n        if (!this.dirty)\n        {\n            return;\n        }\n\n        this.dirty = false;\n        this.dirty_gpu = true;\n\n        const { tex_sizes, arr, count, max_textures, null_color } = this;\n\n        for (let i = 0; i < count; i++)\n        {\n            const tex = arr[i];\n\n            if (tex)\n            {\n                tex_sizes[(i * 4)] = tex.pixelWidth;\n                tex_sizes[(i * 4) + 1] = tex.pixelHeight;\n                tex_sizes[(i * 4) + 2] = 1.0 / tex.pixelWidth;\n                tex_sizes[(i * 4) + 3] = 1.0 / tex.pixelHeight;\n            }\n        }\n\n        tex_sizes[max_textures * 4] = null_color[0];\n        tex_sizes[(max_textures * 4) + 1] = null_color[1];\n        tex_sizes[(max_textures * 4) + 2] = null_color[2];\n        tex_sizes[(max_textures * 4) + 3] = null_color[3];\n    }\n\n    markDirty()\n    {\n        this.dirty = true;\n    }\n\n    getBindGroup()\n    {\n        this.update();\n        if (!this.dirty_gpu)\n        {\n            return this.bind_group;\n        }\n\n        const { bind_group_resources, max_textures, arr, count } = this;\n\n        let bindIndex = 0;\n\n        bind_group_resources[bindIndex++] = new UniformGroup({\n            u_texture_size: {\n                value: this.tex_sizes,\n                type: 'vec4<f32>',\n                size: max_textures\n            },\n            u_null_color: {\n                value: this.null_color,\n                type: 'vec4<f32>'\n            },\n        });\n\n        for (let i = 0; i < max_textures; i++)\n        {\n            const texture = (i < count ? arr[i] : null) || Texture.EMPTY.source;\n\n            bind_group_resources[bindIndex++] = texture.source;\n            bind_group_resources[bindIndex++] = texture.style;\n        }\n\n        if (!this.bind_group)\n        {\n            this.bind_group = new BindGroup(bind_group_resources);\n        }\n\n        return this.bind_group;\n    }\n\n    static generate_gpu_textures(max_textures: number): string\n    {\n        const src: string[] = [];\n\n        src.push(`struct TextureArrayFields {`);\n        src.push(`    u_texture_size: array<vec4f, ${max_textures}>,`);\n        src.push(`    u_null_color: vec4f`);\n        src.push(`}`);\n        src.push(`@group(1) @binding(0) var<uniform> taf: TextureArrayFields;`);\n        for (let i = 0; i < max_textures; i++)\n        {\n            src.push(`@group(1) @binding(${(i * 2) + 1}) var u_texture_${i}: texture_2d<f32>;`);\n            src.push(`@group(1) @binding(${(i * 2) + 2}) var u_sampler_${i}: sampler;`);\n        }\n\n        src.push('fn sampleMultiTexture(texture_id: i32, uv: vec2f, dx: vec2f, dy: vec2f) -> vec4f {');\n        src.push(`switch texture_id {`);\n        for (let i = 0; i < max_textures; i++)\n        {\n            src.push(`  case ${i}: { return textureSampleGrad(u_texture_${i}, u_sampler_${i}, uv, dx, dy); }`);\n        }\n        src.push(`  default: { return taf.u_null_color; }`);\n        src.push('} }');\n\n        return src.join('\\n');\n    }\n\n    static generate_gl_textures(max_textures: number): string\n    {\n        const src: string[] = [];\n\n        src.push(`uniform vec4 u_texture_size[${max_textures + 1}];`);\n        src.push(`uniform sampler2D u_textures[${max_textures}];`);\n        src.push(`uniform vec4 u_null_color;`);\n\n        src.push('vec4 sampleMultiTexture(float texture_id, vec2 uv) {');\n        src.push(`if(texture_id < -0.5) return u_texture_size[${max_textures}];`);\n        for (let i = 0; i < max_textures; i++)\n        {\n            src.push(`if(texture_id < ${i}.5) return texture(u_textures[${i}], uv * u_texture_size[${i}].zw);`);\n        }\n        src.push(`return u_texture_size[${max_textures}];`);\n        src.push('}');\n\n        return src.join('\\n');\n    }\n\n    static gl_gen_resources(max_textures: number): any\n    {\n        const sampleValues: Array<number> = [];\n\n        for (let i = 0; i < max_textures; i++)\n        {\n            sampleValues[i] = i;\n        }\n\n        const samplerSize: Array<number> = [];\n\n        for (let i = 0; i < max_textures; i++)\n        {\n            // These are overwritten by TilemapRenderer when textures actually bound.\n            samplerSize.push(2048);\n            samplerSize.push(2048);\n            samplerSize.push(1.0 / 2048);\n            samplerSize.push(1.0 / 2048);\n        }\n\n        return {\n            u_textures: {\n                value: sampleValues,\n                type: 'i32',\n                size: max_textures\n            },\n            u_texture_size: {\n                value: samplerSize,\n                type: 'vec4<f32>',\n                size: max_textures\n            }\n        };\n    }\n}\n"],"names":["Buffer","BufferUsage","UniformGroup","Texture","BindGroup"],"mappings":"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"}