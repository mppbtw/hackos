{
  "version": 3,
  "sources": ["../../ismobilejs/src/isMobile.ts", "../../ismobilejs/src/index.ts"],
  "sourcesContent": ["const appleIphone = /iPhone/i;\nconst appleIpod = /iPod/i;\nconst appleTablet = /iPad/i;\nconst appleUniversal = /\\biOS-universal(?:.+)Mac\\b/i;\nconst androidPhone = /\\bAndroid(?:.+)Mobile\\b/i; // Match 'Android' AND 'Mobile'\nconst androidTablet = /Android/i;\nconst amazonPhone = /(?:SD4930UR|\\bSilk(?:.+)Mobile\\b)/i; // Match 'Silk' AND 'Mobile'\nconst amazonTablet = /Silk/i;\nconst windowsPhone = /Windows Phone/i;\nconst windowsTablet = /\\bWindows(?:.+)ARM\\b/i; // Match 'Windows' AND 'ARM'\nconst otherBlackBerry = /BlackBerry/i;\nconst otherBlackBerry10 = /BB10/i;\nconst otherOpera = /Opera Mini/i;\nconst otherChrome = /\\b(CriOS|Chrome)(?:.+)Mobile/i;\nconst otherFirefox = /Mobile(?:.+)Firefox\\b/i; // Match 'Mobile' AND 'Firefox'\n\nexport type UserAgent = string;\nexport type Navigator = {\n  userAgent: string;\n  platform: string;\n  maxTouchPoints?: number;\n};\n\nconst isAppleTabletOnIos13 = (navigator?: Navigator): boolean => {\n  return (\n    typeof navigator !== 'undefined' &&\n    navigator.platform === 'MacIntel' &&\n    typeof navigator.maxTouchPoints === 'number' &&\n    navigator.maxTouchPoints > 1 &&\n    typeof MSStream === 'undefined'\n  );\n};\n\nfunction createMatch(userAgent: UserAgent): (regex: RegExp) => boolean {\n  return (regex: RegExp): boolean => regex.test(userAgent);\n}\n\nexport type isMobileResult = {\n  apple: {\n    phone: boolean;\n    ipod: boolean;\n    tablet: boolean;\n    universal: boolean;\n    device: boolean;\n  };\n  amazon: {\n    phone: boolean;\n    tablet: boolean;\n    device: boolean;\n  };\n  android: {\n    phone: boolean;\n    tablet: boolean;\n    device: boolean;\n  };\n  windows: {\n    phone: boolean;\n    tablet: boolean;\n    device: boolean;\n  };\n  other: {\n    blackberry: boolean;\n    blackberry10: boolean;\n    opera: boolean;\n    firefox: boolean;\n    chrome: boolean;\n    device: boolean;\n  };\n  phone: boolean;\n  tablet: boolean;\n  any: boolean;\n};\n\nexport type IsMobileParameter = UserAgent | Navigator;\n\nexport default function isMobile(param?: IsMobileParameter): isMobileResult {\n  let nav: Navigator = {\n    userAgent: '',\n    platform: '',\n    maxTouchPoints: 0,\n  };\n\n  if (!param && typeof navigator !== 'undefined') {\n    nav = {\n      userAgent: navigator.userAgent,\n      platform: navigator.platform,\n      maxTouchPoints: navigator.maxTouchPoints || 0,\n    };\n  } else if (typeof param === 'string') {\n    nav.userAgent = param;\n  } else if (param && param.userAgent) {\n    nav = {\n      userAgent: param.userAgent,\n      platform: param.platform,\n      maxTouchPoints: param.maxTouchPoints || 0,\n    };\n  }\n\n  let userAgent = nav.userAgent;\n\n  // Facebook mobile app's integrated browser adds a bunch of strings that\n  // match everything. Strip it out if it exists.\n  let tmp = userAgent.split('[FBAN');\n  if (typeof tmp[1] !== 'undefined') {\n    userAgent = tmp[0];\n  }\n\n  // Twitter mobile app's integrated browser on iPad adds a \"Twitter for\n  // iPhone\" string. Same probably happens on other tablet platforms.\n  // This will confuse detection so strip it out if it exists.\n  tmp = userAgent.split('Twitter');\n  if (typeof tmp[1] !== 'undefined') {\n    userAgent = tmp[0];\n  }\n\n  const match = createMatch(userAgent);\n\n  const result: isMobileResult = {\n    apple: {\n      phone: match(appleIphone) && !match(windowsPhone),\n      ipod: match(appleIpod),\n      tablet:\n        !match(appleIphone) &&\n        (match(appleTablet) || isAppleTabletOnIos13(nav)) &&\n        !match(windowsPhone),\n      universal: match(appleUniversal),\n      device:\n        (match(appleIphone) ||\n          match(appleIpod) ||\n          match(appleTablet) ||\n          match(appleUniversal) ||\n          isAppleTabletOnIos13(nav)) &&\n        !match(windowsPhone),\n    },\n    amazon: {\n      phone: match(amazonPhone),\n      tablet: !match(amazonPhone) && match(amazonTablet),\n      device: match(amazonPhone) || match(amazonTablet),\n    },\n    android: {\n      phone:\n        (!match(windowsPhone) && match(amazonPhone)) ||\n        (!match(windowsPhone) && match(androidPhone)),\n      tablet:\n        !match(windowsPhone) &&\n        !match(amazonPhone) &&\n        !match(androidPhone) &&\n        (match(amazonTablet) || match(androidTablet)),\n      device:\n        (!match(windowsPhone) &&\n          (match(amazonPhone) ||\n            match(amazonTablet) ||\n            match(androidPhone) ||\n            match(androidTablet))) ||\n        match(/\\bokhttp\\b/i),\n    },\n    windows: {\n      phone: match(windowsPhone),\n      tablet: match(windowsTablet),\n      device: match(windowsPhone) || match(windowsTablet),\n    },\n    other: {\n      blackberry: match(otherBlackBerry),\n      blackberry10: match(otherBlackBerry10),\n      opera: match(otherOpera),\n      firefox: match(otherFirefox),\n      chrome: match(otherChrome),\n      device:\n        match(otherBlackBerry) ||\n        match(otherBlackBerry10) ||\n        match(otherOpera) ||\n        match(otherFirefox) ||\n        match(otherChrome),\n    },\n    any: false,\n    phone: false,\n    tablet: false,\n  };\n\n  result.any =\n    result.apple.device ||\n    result.android.device ||\n    result.windows.device ||\n    result.other.device;\n  // excludes 'other' devices and ipods, targeting touchscreen phones\n  result.phone =\n    result.apple.phone || result.android.phone || result.windows.phone;\n  result.tablet =\n    result.apple.tablet || result.android.tablet || result.windows.tablet;\n\n  return result;\n}\n", "export * from './isMobile';\nexport { default } from './isMobile';\n"],
  "mappings": "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",
  "names": ["navigator"]
}
